// <auto-generated />
using System;
using FoodToOrder_Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodToOrder_Backend.Migrations
{
    [DbContext(typeof(FoodToOrderAppContext))]
    [Migration("20240503072706_MadeForeignKeyOptional")]
    partial class MadeForeignKeyOptional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodToOrder_Backend.Models.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("houseNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("restaurant_id")
                        .HasColumnType("int");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("restaurant_id");

                    b.HasIndex("user_id")
                        .IsUnique()
                        .HasFilter("[user_id] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Cart", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.CartDish", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("CartDishes");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Dish", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("dishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img_path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<int>("restaurant_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("restaurant_id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.DishOrder", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("DishId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("DishOrders");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<float>("orderAmount")
                        .HasColumnType("real");

                    b.Property<string>("orderDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Restaurant", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("isOpen")
                        .HasColumnType("bit");

                    b.Property<string>("rName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("date_of_birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Address", b =>
                {
                    b.HasOne("FoodToOrder_Backend.Models.Restaurant", "Restaurant")
                        .WithMany("arrAddresses")
                        .HasForeignKey("restaurant_id");

                    b.HasOne("FoodToOrder_Backend.Models.User", "User")
                        .WithOne("address")
                        .HasForeignKey("FoodToOrder_Backend.Models.Address", "user_id");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Cart", b =>
                {
                    b.HasOne("FoodToOrder_Backend.Models.User", "User")
                        .WithOne("cart")
                        .HasForeignKey("FoodToOrder_Backend.Models.Cart", "user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.CartDish", b =>
                {
                    b.HasOne("FoodToOrder_Backend.Models.Cart", "Cart")
                        .WithMany("cartDishes")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodToOrder_Backend.Models.Dish", "Dish")
                        .WithMany("cartDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Dish", b =>
                {
                    b.HasOne("FoodToOrder_Backend.Models.Restaurant", "Restaurant")
                        .WithMany("dishes")
                        .HasForeignKey("restaurant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.DishOrder", b =>
                {
                    b.HasOne("FoodToOrder_Backend.Models.Dish", "Dish")
                        .WithMany("dishOrders")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodToOrder_Backend.Models.Order", "Order")
                        .WithMany("dishOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Order", b =>
                {
                    b.HasOne("FoodToOrder_Backend.Models.User", "User")
                        .WithMany("orders")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Cart", b =>
                {
                    b.Navigation("cartDishes");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Dish", b =>
                {
                    b.Navigation("cartDishes");

                    b.Navigation("dishOrders");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Order", b =>
                {
                    b.Navigation("dishOrders");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.Restaurant", b =>
                {
                    b.Navigation("arrAddresses");

                    b.Navigation("dishes");
                });

            modelBuilder.Entity("FoodToOrder_Backend.Models.User", b =>
                {
                    b.Navigation("address");

                    b.Navigation("cart");

                    b.Navigation("orders");
                });
#pragma warning restore 612, 618
        }
    }
}
